#include <iostream>
#include <stdio.h>
#include <winbgim.h>

#define MAX 50

using namespace std;

int nrElemente;

void print(int element, int poz, int coloana, int culoare)
{
    char ns[MAX]; itoa(element,ns,10);
    setcolor(culoare);
    rectangle(100+100*coloana,120+30*poz-10,100+100*(coloana+1)-30,
              120+30*poz+20);
    outtextxy(100+100*coloana+30,120+30*poz,ns);
}

void evidentiaza(int element, int poz, int coloana, int culoare)
{
    print(888888,poz,coloana, BLACK);
    print(element,poz,coloana, culoare);
    delay(500);
    print(element,poz,coloana, WHITE);
}

void interclasare(int a[],int p,int m,int q)
{
    int i=p,j=m+1; int k=0;
    int temp[10]={0};
    for (int ii=0; ii<nrElemente; ii++)
        evidentiaza(temp[ii],ii,3,LIGHTCYAN);
    while (i<=m && j<=q)
    {
        evidentiaza(a[i],i,1,LIGHTBLUE);
        evidentiaza(a[i],i,2,LIGHTBLUE);
        evidentiaza(a[j],j,1,LIGHTBLUE);
        evidentiaza(a[j],j,2,LIGHTBLUE);
        if (a[i]<a[j])
            {
                temp[k]=a[i];
                evidentiaza(a[i],i,2,LIGHTCYAN);
                evidentiaza(temp[k],k,3,LIGHTCYAN);
                print(a[i],i,2,BLACK); print(a[j],j,2,BLACK);
                k++; i++;
            }
        else
            {
                temp[k]=a[j];
                evidentiaza(a[j],j,2,LIGHTCYAN);
                evidentiaza(temp[k],k,3,LIGHTCYAN);
                print(a[i],i,2,BLACK); print(a[j],j,2,BLACK);
                k++; j++;
            }
    }
    while (i<=m)
        {
            evidentiaza(a[i],i,1,LIGHTGREEN);
            temp[k]=a[i];
            evidentiaza(temp[k],k,3,LIGHTGREEN);
            k++; i++;
        }
    while (j<=q)
        {
            evidentiaza(a[j],j,1,LIGHTGREEN);
            temp[k]=a[j];
            evidentiaza(temp[k],k,3,LIGHTGREEN);
            k++; j++;
        }
    for (i=0;i<k;i++)
    {
        a[p+i]=temp[i];
        evidentiaza(temp[i],i,3,RED);
        evidentiaza(a[p+i],p+i,1,RED);
    }
}

void mergesort(int a[],int p, int q)
{
    if (p<q)
    {
        int m=(p+q)/2;
        mergesort(a,p,m);
        mergesort(a,m+1,q);
        interclasare(a,p,m,q);
    }
}

void citesteSir(char text[MAX], char s[MAX], int x, int y, bool stergere)
{
    strcpy(s,"");
    char s1[MAX];
    char t[2];
    char tasta;
    char text2[MAX];
    t[0]=tasta; t[1]='\0';
    strcat(s,t);
    strcpy(s1,s); strcat(s1,"_");
    setcolor(WHITE);
    strcpy(text2,text);
    strcat(text2,s1);
    outtextxy(x,y,text2);
    do {
        tasta=getch();
        if (tasta==8) // backspace
            if (strlen(s)>0)
                {
                    setcolor(BLACK);
                    strcpy(s1,s); strcat(s1,"_");
                    strcpy(text2,text);
                    strcat(text2,s1);
                    outtextxy(x,y,text2);
                    s[strlen(s)-1]='\0';
                    strcpy(s1,s); strcat(s1,"_");
                    strcpy(text2,text);
                    strcat(text2,s1);
                    outtextxy(x,y,text2);
                    setcolor(WHITE);
                    strcpy(text2,text);
                    strcat(text2,s1);
                    outtextxy(x,y,text2);
                }
            else
                Beep(1000,100);
        else
        {
            t[0]=tasta; t[1]='\0';
            strcat(s,t);
            strcpy(s1,s); strcat(s1,"_");
            setcolor(WHITE);
            strcpy(text2,text);
            strcat(text2,s1);
            outtextxy(x,y,text2);
        }
    } while (tasta!=13);
    t[0]=tasta; t[1]='\0';
    strcat(s,t);
    strcpy(s1,s); strcat(s1,"_");
    strcpy(text2,text);
    strcat(text2,s1);
    setcolor(BLACK); outtextxy(x,y,text2);
    if (!stergere)
    {
        strcpy(text2,text);
        strcat(text2,s);
        setcolor(WHITE); outtextxy(x,y,text2);
    }
}

int main()
{
    int a[20];
    int n,i;
    char ns[MAX];
    char tt[MAX], ss[MAX];
    // cout<<"n="; cin>>n;
    initwindow(1000,800,"BibMat");
    setcolor(YELLOW);setbkcolor(BLUE);
    setbkcolor(BLACK);
    outtextxy(100,30,"Merge Sort");
    citesteSir("Dati dimensiunea vectorului, n=",ns,100,70,false);
    nrElemente=atoi(ns); n=nrElemente;
    for (i=0;i<n;i++)
    {
        // cout<<"a["<<i<<"]="; cin>>a[i];
        itoa(i,ss,10); strcpy(tt,"a[");
        strcat(tt,ss); strcat(tt,"]=");
        citesteSir(tt,ns,100,120+30*i,false);
        a[i]=atoi(ns);
        evidentiaza(a[i],i,1,LIGHTGREEN);
    }
     for (i=0;i<n;i++)
        cout<<a[i]<<", ";
    cout<<endl;
    mergesort(a,0,n-1);
    for (i=0;i<n;i++)
        cout<<a[i]<<", ";
    cout<<endl;
    return 0;
}
