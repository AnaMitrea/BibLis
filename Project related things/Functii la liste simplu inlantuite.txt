// ---------- AFISAREA UNEI LISTE SIMPLU-INLANTUITE ----------
void afisareListaSimpluInlantuita(nod *prim)
{
    settextstyle(4, HORIZ_DIR, 4);
    outtextxy(350, 100, " Afisarea unei liste simplu-inlantuite");

    nod* p = prim;
    unsigned int x = 20, y = 250;
    unsigned int xtext = 25, ytext = 265;

    while (p != NULL)
    {
        if (x <= 1400)  // daca nu iese din ecran
        {
            fout << p->valoare << ' ';

            // AFISAREA NODULUI CORESPUNZATOR
            if (p->urm == NULL)
                readimagefile("nod lista cu null.jpg", x, y, x + 250, y + 50);
            else
                readimagefile("nod lista.jpg", x, y, x + 200, y + 50);

            // DIMENSIUNEA TEXTULUI IN FIECARE NOD
			dimensiuneText(p->valoare);

            // AFISARE IN MODUL GRAFIC
            bgiout << p->valoare;
            outstreamxy(xtext, ytext);

            // COORDONATELE URMATORULUI NOD
            x += 200;
            xtext += 200;

            p = p->urm;
            delay(400);
        }
        else
        {
            // COORDONATELE URMATORULUI RAND DACA SE AJUNGE LA CAPAT DE ECRAN
            x = 20;
            y += 100;
            xtext = 25;
            ytext += 100;
        }
    }
}


void inserareSfarsit(nod*& prim, int val)
{
    settextstyle(4, HORIZ_DIR, 4);
    outtextxy(170, 100, " Inserarea unui nod la sfarsitul unei liste simplu-inlantuite");

    // INSERAREA
    nod *p = new nod;
    p->valoare = val;
    p->urm = NULL;
    if (prim == NULL)
        prim = p;
    else
    {
        nod *q = prim;
        while (q->urm != NULL)
        {
            q = q->urm;
        }
        q->urm = p;
    }

    // AFISAREA FUNCTIEI IN MODUL GRAFIC
    p = prim;
    unsigned int x = 20, y = 250;
    unsigned int xtext = 25, ytext = 265;

    while (p != NULL)
    {
        if(x <= 1400)  // daca nu iese din ecran
        {
            fout << p->valoare << ' ';

            // AFISAREA NODULUI CORESPUNZATOR
            if (p->urm == NULL)
                readimagefile("nod inserat lista cu null.jpg", x, y - 10, x + 270, y + 50);
            else
                readimagefile("nod lista.jpg", x, y, x + 200, y + 50);

            // DIMENSIUNEA TEXTULUI IN FIECARE NOD
            dimensiuneText(p->valoare);

            // AFISARE IN MODUL GRAFIC
            bgiout << p->valoare;
            outstreamxy(xtext, ytext);

            // COORDONATELE URMATORULUI NOD
            x += 200;
            xtext += 200;

            p = p->urm;
            delay(400);
        }
        else
        {
            // COORDONATELE URMATORULUI RAND DACA SE AJUNGE LA CAPAT DE ECRAN
            x = 20;
            y += 100;
            xtext = 25;
            ytext += 100;
        }
    }
    fout << '\n';
    delay(3000);
    cleardevice();
}





//------------- FUNCTII PENTRU STERGERE --------------

void stergerePrimul(nod *&prim)
{
    nod *p = prim->urm;
    delete prim;
    prim = p;
}

void stergerePrimaAparitie(nod *&prim, nod *element_dat)
{
    int aparitie = element_dat->valoare;
    nod *p = prim;
    while(p != NULL)
    {
        if(p->valoare == aparitie)
        {
            nod *q = (p->urm)->urm;
            delete p->urm;
            p->urm = q;
            return;
        }
        p = p->urm;
    }
}

void stergereToateAparitiile(nod *&prim, int val)
{
    nod *p = prim;
    while(p->urm != NULL)
    {
        if((p->urm)->valoare == val)
        {
            nod *q = p->urm;
            p->urm = (p->urm)->urm;
            delete q;
        }
        else
            p = p->urm;
    }
    if(prim->valoare == val)
    {
        nod *q = prim;
        prim = prim->urm;
        delete q;
    }
    if(prim == NULL)
        fout << "LISTA VIDA";
}
