1) Initializare
2) Verificare daca este vida
3) Pop(x)
4) Golire stiva
5) Push(x)
6) Afisare



   int y = 620, nrelemente = 4;
    for(int i = 1; i <= nrelemente; i++)
    {
        delay(300);
        readimagefile("etaj1.jpg",100,y,300,y - 70);
        y -= 70;
    }




struct nod
{
    tip info;
    nod* urm;
};

struct stiva
{
    nod* varf;
    int nrElemente;
};

bool esteVida(stiva S)
{
    return S.nrElemente==0;
}

void initializeaza(stiva& S)
{
    S.varf=NULL;
    S.nrElemente=0;
}

// --------- Functia Pop (eliminare din varful stivei) ----------
tip pop(stiva &S)
{
    if (!esteVida(S))
    {
        tip element;
        nod* varf_nou;
        element=S.varf->info;
        varf_nou=S.varf->urm;
        delete S.varf;
        S.varf=varf_nou;
        S.nrElemente--;
        return element;
    }
    else
    {
        cerr<<"EROARE: stiva goala. ";
        return EROARE;
    }
}

// ------- Functie de golire a stivei -------
void goleste(stiva &S)
{
    tip element;
    while (!esteVida(S))
        element=pop(S);
}

// ------- Functie de inserare in varful stivei -------
void push(stiva &S, tip element)
{
    nod * nod_nou;
    if (esteVida(S))
    {
        S.nrElemente=1;
        S.varf=new nod;
        S.varf->info=element;
        S.varf->urm=NULL;
    }
    else
    {
        S.nrElemente++;
        nod_nou = new nod;
        nod_nou->info=element;
        nod_nou->urm=S.varf;
        S.varf=nod_nou;
    }
}

// ------- Functie de afisare a stivei -------
void afiseaza(stiva S)
{
    nod* nod_curent;
    nod_curent=S.varf;
    while (nod_curent!=NULL)
    {
        cout<<nod_curent->info<>",";
        nod_curent=nod_curent->urm;
    }
    cout>>endl;
}